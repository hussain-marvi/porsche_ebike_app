// Mocks generated by Mockito 5.4.4 from annotations
// in porsche_ebike_app/test/usecases/scan_bikes_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:porsche_ebike_app/core/usecase.dart' as _i10;
import 'package:porsche_ebike_app/features/e-bike/data/services/ble_service.dart'
    as _i3;
import 'package:porsche_ebike_app/features/e-bike/data/services/usb_service.dart'
    as _i2;
import 'package:porsche_ebike_app/features/e-bike/domain/entities/bike.dart'
    as _i6;
import 'package:porsche_ebike_app/features/e-bike/domain/repositories/ble_repository.dart'
    as _i7;
import 'package:porsche_ebike_app/features/e-bike/domain/repositories/usb_repository.dart'
    as _i4;
import 'package:porsche_ebike_app/features/e-bike/domain/usecases/scan_bikes_usecase.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUSBService_0 extends _i1.SmartFake implements _i2.USBService {
  _FakeUSBService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBLEService_1 extends _i1.SmartFake implements _i3.BLEService {
  _FakeBLEService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [USBRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUSBRepository extends _i1.Mock implements _i4.USBRepository {
  MockUSBRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i6.BikeEntity>> scan() => (super.noSuchMethod(
        Invocation.method(
          #scan,
          [],
        ),
        returnValue: _i5.Future<List<_i6.BikeEntity>>.value(<_i6.BikeEntity>[]),
      ) as _i5.Future<List<_i6.BikeEntity>>);

  @override
  _i5.Stream<Map<String, dynamic>> getDataStream(String? bikeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDataStream,
          [bikeId],
        ),
        returnValue: _i5.Stream<Map<String, dynamic>>.empty(),
      ) as _i5.Stream<Map<String, dynamic>>);
}

/// A class which mocks [BLERepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBLERepository extends _i1.Mock implements _i7.BLERepository {
  MockBLERepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i6.BikeEntity>> scan() => (super.noSuchMethod(
        Invocation.method(
          #scan,
          [],
        ),
        returnValue: _i5.Future<List<_i6.BikeEntity>>.value(<_i6.BikeEntity>[]),
      ) as _i5.Future<List<_i6.BikeEntity>>);

  @override
  _i5.Stream<Map<String, dynamic>> getDataStream(String? bikeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDataStream,
          [bikeId],
        ),
        returnValue: _i5.Stream<Map<String, dynamic>>.empty(),
      ) as _i5.Stream<Map<String, dynamic>>);
}

/// A class which mocks [BikeEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockBikeEntity extends _i1.Mock implements _i6.BikeEntity {
  MockBikeEntity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  _i6.BikeModel get model => (super.noSuchMethod(
        Invocation.getter(#model),
        returnValue: _i6.BikeModel.metroBee,
      ) as _i6.BikeModel);

  @override
  List<_i6.BikeEntity> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <_i6.BikeEntity>[],
      ) as List<_i6.BikeEntity>);
}

/// A class which mocks [ScanBikesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockScanBikesUseCase extends _i1.Mock implements _i9.ScanBikesUseCase {
  MockScanBikesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.USBService get usbService => (super.noSuchMethod(
        Invocation.getter(#usbService),
        returnValue: _FakeUSBService_0(
          this,
          Invocation.getter(#usbService),
        ),
      ) as _i2.USBService);

  @override
  _i3.BLEService get bleService => (super.noSuchMethod(
        Invocation.getter(#bleService),
        returnValue: _FakeBLEService_1(
          this,
          Invocation.getter(#bleService),
        ),
      ) as _i3.BLEService);

  @override
  _i5.Future<List<_i6.BikeEntity>> call(_i10.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<List<_i6.BikeEntity>>.value(<_i6.BikeEntity>[]),
      ) as _i5.Future<List<_i6.BikeEntity>>);
}
